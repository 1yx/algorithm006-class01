package main

/*
 * @lc app=leetcode.cn id=123 lang=golang
 *
 * [123] 买卖股票的最佳时机 III
 *
 * https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/description/
 *
 * algorithms
 * Hard (41.52%)
 * Likes:    326
 * Dislikes: 0
 * Total Accepted:    27.8K
 * Total Submissions: 66K
 * Testcase Example:  '[3,3,5,0,0,3,1,4]'
 *
 * 给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。
 *
 * 设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。
 *
 * 注意: 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
 *
 * 示例 1:
 *
 * 输入: [3,3,5,0,0,3,1,4]
 * 输出: 6
 * 解释: 在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。
 * 随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。
 *
 * 示例 2:
 *
 * 输入: [1,2,3,4,5]
 * 输出: 4
 * 解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4
 * 。
 * 注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。
 * 因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
 *
 *
 * 示例 3:
 *
 * 输入: [7,6,4,3,1]
 * 输出: 0
 * 解释: 在这个情况下, 没有交易完成, 所以最大利润为 0。
 *
 */

// @lc code=start
/*
	dp方程：
	定义状态： i -> 天数; k -> 已达成交易总数; b (0,1) -> 当天对股票是否持有 0否1持有
			  value -> 直到当天的最大利润
	dp[i][k][1] = Max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])
	dp[i][k][0] = Max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])

	max_k = 2

	dp[-1][k][0] = 0
	解释：因为 i 是从 0 开始的，所以 i = -1 意味着还没有开始，这时候的利润当然是 0 。
	dp[-1][k][1] = -infinity
	解释：还没开始的时候，是不可能持有股票的，用负无穷表示这种不可能。
	dp[i][0][0] = 0
	解释：因为 k 是从 1 开始的，所以 k = 0 意味着根本不允许交易，这时候利润当然是 0 。
	dp[i][0][1] = -infinity
	解释：不允许交易的情况下，是不可能持有股票的，用负无穷表示这种不可能。

*/
/* 
func maxProfit(prices []int) int {
	days := len(prices)
	if prices == nil || days == 0 {
		return 0
	}
	dp := make([][][]int, days)

	maxK := 2

	for 
	for i := 0; i < days; i++ {
		for k := 
	}
	return 0
}
 */
// @lc code=end
